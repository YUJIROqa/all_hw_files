# Конспект по работе с сетевыми запросами в Playwright

## Подтема 1: Отслеживание сетевых запросов и ответов

### Теория
Playwright позволяет отслеживать все сетевые запросы и ответы, возникающие при взаимодействии с веб-страницей. Это полезно для:
- Отладки сетевых взаимодействий
- Анализа API-вызовов
- Проверки корректности отправляемых данных
- Мониторинга ответов сервера

### Код из файла
```python
def test_listen(page: Page):
    def print_request(request: Request):
        print('REQUEST:', request.post_data, request.url)

    sleep(3)
    page.on('request', print_request)
    page.on('response', lambda response: print('RESPONSE:', response.url, response.status))
    page.goto('https://www.qa-practice.com/')
    page.get_by_role('link', name='Text input').click()
    input_field = page.locator('#id_text_string')
    input_field.fill('werwrtertet')
    input_field.press('Enter')
```

### Разбор кода
1. `def print_request(request: Request):` - Определяем функцию-обработчик, которая будет вызываться при каждом запросе.
2. `page.on('request', print_request)` - Регистрируем обработчик для событий запросов.
3. `page.on('response', lambda...)` - Регистрируем обработчик для событий ответов с использованием лямбда-функции.
4. После этого выполняются обычные действия на странице (переход, клик, заполнение формы), и все возникающие запросы и ответы будут логироваться.

### Дополнительная теория
- В обработчиках можно получить доступ к таким свойствам запросов, как метод, URL, заголовки, тело запроса.
- Для ответов доступны статус, заголовки, тело ответа, URL.
- Обработчики могут быть как именованными функциями, так и лямбда-функциями.
- Можно регистрировать несколько обработчиков для одного типа событий.

## Подтема 2: Перехват и модификация сетевых ответов

### Теория
Playwright позволяет не только отслеживать, но и модифицировать сетевые ответы. Это используется для:
- Тестирования поведения сайта при различных ответах API
- Изменения стилей или содержимого страницы
- Эмуляции различных сценариев работы бэкенда
- Инжекции тестовых данных

### Код из файла
```python
def test_pogoda(page: Page):
    def handle_route(route: Route):
        response = route.fetch()
        body = response.json()
        body['temperature'] = '+32'
        body['icon'] = 'A2'
        body = json.dumps(body)
        route.fulfill(
            response=response,
            body=body
        )

    sleep(3)
    page.route('**/pogoda/**', handle_route)
    page.goto('https://www.onliner.by/')
    page.locator('[name="query"]').click()
    sleep(10)
```

### Разбор кода
1. `def handle_route(route: Route):` - Создаем функцию-обработчик для перехвата и модификации ответов.
2. `response = route.fetch()` - Получаем оригинальный ответ, выполняя запрос.
3. `body = response.json()` - Преобразуем тело ответа в JSON для удобной модификации.
4. Изменяем значения в JSON-объекте.
5. `route.fulfill(response=response, body=body)` - Отправляем модифицированный ответ.
6. `page.route('**/pogoda/**', handle_route)` - Регистрируем обработчик для запросов, содержащих 'pogoda'.

### Дополнительная теория
- Метод `route.fetch()` выполняет оригинальный запрос и возвращает ответ.
- Метод `route.fulfill()` позволяет предоставить измененный ответ.
- Можно модифицировать любые аспекты ответа: статус, заголовки, тело.
- Шаблоны URL могут использовать глобальные выражения (`**/*.js`) или регулярные выражения.

## Подтема 3: Работа с API через Playwright

### Теория
Playwright предоставляет встроенный API-клиент для прямого взаимодействия с REST API без необходимости открывать веб-страницу. Это полезно для:
- Подготовки тестовых данных
- Проверки API-эндпоинтов
- Комбинирования API и UI-тестов
- Быстрого выполнения запросов в контексте браузера

### Код из файла
```python
def test_api(page: Page):
    response = page.request.get('https://jsonplaceholder.typicode.com/posts/42')
    print(response.json(), response.status)
    expect(response).to_be_ok()
    assert response.json()['id'] == 42
    print(type(response))
```

### Разбор кода
1. `response = page.request.get(...)` - Выполняем GET-запрос к указанному URL.
2. `print(response.json(), response.status)` - Выводим тело ответа в формате JSON и HTTP-статус.
3. `expect(response).to_be_ok()` - Проверяем, что ответ имеет успешный статус (200-299).
4. `assert response.json()['id'] == 42` - Проверяем конкретное значение в ответе.

### Дополнительная теория
- Playwright поддерживает все стандартные HTTP-методы: GET, POST, PUT, PATCH, DELETE, HEAD.
- Запросы выполняются в контексте текущей сессии браузера, включая куки и заголовки.
- Можно добавлять произвольные заголовки, параметры запроса и тело запроса.
- API-клиент Playwright автоматически обрабатывает JSON, текст и бинарные данные.

## Подтема 4: Блокировка сетевых запросов

### Теория
Playwright позволяет блокировать сетевые запросы, что полезно для:
- Ускорения тестов путем блокировки ненужных ресурсов
- Эмуляции отказа сервера или сетевых ошибок
- Изоляции тестируемого функционала от внешних зависимостей
- Проверки обработки ошибок на стороне клиента

### Код из файла
```python
def test_4(page: Page):
    def block_js(route: Route):
        route.abort()

    page.route("**/*.js", block_js)
    page.goto('https://www.qa-practice.com/')
    page.get_by_text('Text input').click()
    sleep(10)
```

### Разбор кода
1. `def block_js(route: Route):` - Определяем функцию-обработчик для блокировки запросов.
2. `route.abort()` - Прерываем запрос, что эквивалентно сетевой ошибке.
3. `page.route("**/*.js", block_js)` - Регистрируем обработчик для всех JavaScript-файлов.
4. После этого открываем страницу и выполняем действия. Все запросы к JS-файлам будут заблокированы.

### Дополнительная теория
- Метод `route.abort()` может принимать код ошибки, например `"connectionrefused"` или `"internetdisconnected"`.
- Можно блокировать различные типы ресурсов: изображения, CSS, шрифты, и т.д.
- Блокировка ресурсов значительно ускоряет выполнение тестов.
- Блокировка полезна для проверки поведения сайта при отсутствии определенных ресурсов или API.

## Подтема 5: Изменение маршрутизации запросов

### Теория
Playwright позволяет изменять маршрутизацию запросов, перенаправляя их на другие URL или изменяя параметры. Это полезно для:
- Тестирования на различных API-эндпоинтах
- Перенаправления запросов с продакшн на тестовую среду
- Модификации параметров запросов
- Эмуляции различных сетевых сценариев

### Код из файла
```python
def test_change_request(page: Page):
    def change_req(route: Route):
        url = route.request.url
        print(url)
        url = url.replace('&filter4=09z01', '')
        route.continue_(url=url)
    page.route(re.compile('/product/finder'), change_req)
    page.goto('https://www.samsung.com/au/smartphones/galaxy-z/')
    sleep(2)
    page.locator('[for="checkbox-series09z01"]').click()
    sleep(5)
```

### Разбор кода
1. `def change_req(route: Route):` - Определяем функцию-обработчик для модификации запросов.
2. `url = route.request.url` - Получаем оригинальный URL запроса.
3. `url = url.replace('&filter4=09z01', '')` - Модифицируем URL, удаляя определенный параметр.
4. `route.continue_(url=url)` - Продолжаем запрос с измененным URL.
5. `page.route(re.compile('/product/finder'), change_req)` - Регистрируем обработчик для URL, содержащих '/product/finder'.

### Дополнительная теория
- Метод `route.continue_()` позволяет изменять различные аспекты запроса: URL, метод, заголовки, тело.
- В отличие от `route.fulfill()`, который предоставляет готовый ответ, `route.continue_()` модифицирует запрос и отправляет его на сервер.
- Шаблоны URL могут быть как строками с глобальными шаблонами, так и регулярными выражениями.
- Можно комбинировать различные подходы к маршрутизации в одном тесте.
